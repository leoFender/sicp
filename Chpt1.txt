#### 1.1 
	
10 = 10(+ 5 3 4) = 12(- 9 1) = 8(/ 6 2) = 3(+ (* 2 4) (- 4 6)) = 6(define a 3)(define b (+ a 1))(+ a b (* a b)) = 19(= a b) = #f(if (and (> b a) (< b (* a b)))ba) = 4(cond ((= a 4) 6)((= b 4) (+ 6 7 a))(else 25)) = 13
(+ 2 (if (> b a) b a)) = 6
	

#### 1.2

(/
 (+ 5 4 2 3 (- (+ 6 4/5)))
 (* 3 (- 6 2) (- 2 7)))


#### 1.4

a + |b|
Если b > 0, то а + b, иначе а + (- b)


#### 1.5
Аппликативный - ничего не увидит. Т.к. при вызове (test 0 (Р)) будет попытка вычислить значение (Р) 
Нормальный - 0. Т.к. (if (= x 0)) вернет #t и (Р) вычисляться не будет


#### 1.6 new-if не является специальной формой + аппликативный порядок = будут вычисляться оба случая до применения логики => бесконечная рекурсия